basePath: /api/v1
definitions:
  model.Comment:
    properties:
      comment_id:
        type: integer
      email:
        type: string
      id_courort:
        type: integer
      text:
        type: string
    type: object
  model.Courort:
    properties:
      name_road:
        type: string
      type_road:
        type: string
      work_status:
        type: integer
    type: object
  model.Courorts:
    properties:
      city:
        type: string
      name_courort:
        type: string
    type: object
  model.Response:
    properties:
      status:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      id_role:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:5005
info:
  contact:
    email: ilchel1992@gmail.com
    name: Ilya Chelyadinov
  description: Swagger API for Golang agregator project.
  title: SkOpen API
  version: "1.0"
paths:
  /comments/:
    post:
      consumes:
      - application/json
      parameters:
      - description: Coments's text and IDCourort and text
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Adds comment to database
      tags:
      - Comment
  /comments/{cour}:
    get:
      consumes:
      - application/json
      parameters:
      - description: cour
        in: path
        name: cour
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get comment to specified courort
      tags:
      - Comment
  /comments/{id_comment}:
    post:
      parameters:
      - description: text
        in: path
        name: text
        required: true
        type: string
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: id_cour
        in: path
        name: id_cour
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete specified comment
      tags:
      - Comment
  /courorts/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Courorts'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: get list of courorts
      tags:
      - Courort
  /courorts/{cour}:
    get:
      parameters:
      - description: cour
        in: path
        name: cour
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Courorts'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get specified courort
      tags:
      - Courort
  /courorts/roads_and_courorts:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Courort'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get roads and courorts with details
      tags:
      - Courort
  /users/:
    get:
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: Get a list of users
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: User's email and password and name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Adds user to database
      tags:
      - User
  /users/{email}:
    delete:
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete user from database
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User's email and password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Checks if user can login
      tags:
      - User
  /users/role/{email}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: email
        in: path
        name: email
        required: true
        type: string
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Changes role of user
      tags:
      - User
swagger: "2.0"
